Ebben a mappában a NodeJS egyik alapból beépített modulját mutatom be, melynek segítségével 
fájlműveletek végezhetőek el. A program kiolvassa két fájl tartalmát, majd az eredményt egy 
újonnan létrehozott másik fájlba írja bele. 

Ha megnézzük a kódot látható, hogy ezen függvények utolsó paraméterként egy függvényt várnak. 
Ez a legtöbb beépített NodeJS függvényre igaz. Ezt a függvényt callback függvénynek hívják és 
általában két paraméteresek. Az egyik paraméter rendszerint 'err', a másik pedig 'res'. Ez a 
függvény nagyon fontos és sokmindenért felel. Felel egyrészt azért, hogy mi történjen a beépített 
függvény lefutása után. (Ez esetben hiba esetén jelenjen meg konzolon a hibaüzenet. Ha nem 
jelentkezik hiba, akkor meg az eredmény kerüljön lementésre egy új változóban.)

Felmerülhet a kérdés hogy jó de ha kész vagyunk miért nem zárjuk le a callback függvényt és az 
első 'readFile' függvényt? Nos ez a másik eset amire jó a callback függvény. Segítségével 
szabályozhatjuk a függvények futási sorrendjét. Képzeljük csak el, ha egymás alá írnánk a két 
'readFile' függvényünket. Az elsőnek egy 20 MB-os fájlt kell feldolgoznia, a másodiknak pedig 
csak egy 20 kB-osat. A NodeJS segíteni szeretne nekünk ilyen esetben és indít nekünk egy másik 
szálat. Magyarul amíg az első 'readFile' szenved a 20 MB-al, egy új szálon addig a második 
'readFile' függvény is fut. Ez nem hangzik rosszul, a probléma ezzel csak az, hogy a második 
'readFile' függvény hamarabb lesz kész. Jobb esetben fordított fals eredményt kapunk, rosszabb 
esetben a Node meg sem várja, hogy az első 'readFile' lefusson, hiszen a program végére értünk. 
Nos hát ezért nem zártam le a callback függvényt. Ezzel tudom szabályozni, hogy az első eredményt 
mindenképpen meg akarom várni, hogy mi lesz, és csak utána kezdek neki a másodiknak. 

Ugyanezen logika alapján folytattam tovább is. A máodik 'readFile' függvény callback függvényében 
található az a kódrész, amely az eredményt egy új fájlba írja. Így tudtam szabályozni, hogy a második 
'readFile' függvény mindenképpen fusson le, még mielőtt elkezdődne a fájlba írás folyamata. 
 
